#1st-LIBRARY MANAGEMENT SYSTEM:

SQL*Plus: Release 21.0.0.0.0 - Production on Tue Jan 14 19:42:13 2025
Version 21.3.0.0.0
Copyright (c) 1982, 2021, Oracle.  All rights reserved.
Enter user-name: system
Enter password:
Last Successful login time: Tue Jan 14 2025 19:40:46 +05:30
Connected to:
Oracle Database 21c Express Edition Release 21.0.0.0.0 - Production
Version 21.3.0.0.0

#CREATING TABLES

(1)BOOKS:
SQL> create table Books(
  2  BookID integer primary key,
  3  Title varchar(100) not null,
  4  Author varchar(100) not null,
  5  Genre varchar(50),
  6  PublishedYear integer,
  7  TotalCopies integer not null,
  8  AvailableCopies integer not null);

Table created.

(2)MEMBERS:
SQL> create table Members(
  2  MemberID integer primary key,
  3  Name varchar(100) not null,
  4  Email varchar(100) unique not null,
  5  Phone number unique not null,
  6  JoinDate date default current_date);

Table created.

(3)TRANSACTIONS:
SQL> create table Transactions(
  2  TransactionID integer primary key,
  3  MemberID integer not null,
  4  BookID integer not null,
  5  BorrowDate date default current_date,
  6  ReturnDate date,
  7  foreign key (MemberID) references Members (MemberID),
  8  foreign key (BookID) references Books (BookID));

Table created.

#DESCRIBING TABLES

(1)BOOKS:
SQL> desc Books;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 BOOKID                                    NOT NULL NUMBER(38)
 TITLE                                     NOT NULL VARCHAR2(100)
 AUTHOR                                    NOT NULL VARCHAR2(100)
 GENRE                                              VARCHAR2(50)
 PUBLISHEDYEAR                                      NUMBER(38)
 TOTALCOPIES                               NOT NULL NUMBER(38)
 AVAILABLECOPIES                           NOT NULL NUMBER(38)

(2)MEMBERS:
SQL> desc Members;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 MEMBERID                                  NOT NULL NUMBER(38)
 NAME                                      NOT NULL VARCHAR2(100)
 EMAIL                                     NOT NULL VARCHAR2(100)
 PHONE                                     NOT NULL NUMBER
 JOINDATE                                           DATE

(3)TRANSACTIONS:
SQL> desc Transactions;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 TRANSACTIONID                             NOT NULL NUMBER(38)
 MEMBERID                                  NOT NULL NUMBER(38)
 BOOKID                                    NOT NULL NUMBER(38)
 BORROWDATE                                         DATE
 RETURNDATE                                         DATE

#INSERTING VALUES

(1)BOOKS:
SQL> insert into Books Values(1,'The Great Gatsby','F.Scott Fitzgerald','Fiction',1925,5,5);

1 row created.

SQL> insert into Books Values(2,'1984','George Orwell','Dystopian',1949,3,3);

1 row created.

SQL> insert into Books Values(3,'To Kill a Mockingbird','Harper Lee','Fiction',1960,4,4);

1 row created.

(2)MEMBERS:
SQL> insert into Members values(10,'Alice Johnson','alice@gmail.com',8921829654,to_date('2024-06-24','yy-mm-dd'));

1 row created.

SQL> insert into Members values(20,'Bob Smith','bob@gmail.com',9495696542,to_date('2024-08-12','yy-mm-dd'));

1 row created.

(3)TRANSACTIONS:
SQL> insert into Transactions values(11,10,1,to_date('2024-06-28','yy-mm-dd'),to_date('2024-07-28','yy-mm-dd'));

1 row created.

SQL> insert into Transactions values(22,20,3,to_date('2024-09-05','yy-mm-dd'),to_date('2024-10-05','yy-mm-dd'));

1 row created.

#SQL QUERIES

(1)INSERT A NEW BOOK:
SQL> insert into Books values(4,'Pride and Prejudice','Jane Austen','Classic',1813,2,2);

1 row created.

(2)UPDATE BOOK DETAILS:
SQL> update Books set TotalCopies=6,AvailableCopies=6 where BookID=1;

1 row updated.

(3)DELETE A BOOK:
delete from Books where Title='1948';

1 rows deleted.

(4)RETRIEVING COLUMNS FROM TABLE:
(.)SQL> select Title,Genre from Books;

TITLE
--------------------------------------------------------------------------------
GENRE
--------------------------------------------------
The Great Gatsby
Fiction

1984
Dystopian

To Kill a Mockingbird
Fiction


TITLE
--------------------------------------------------------------------------------
GENRE
--------------------------------------------------
Pride and Prejudice
Classic

(.)SQL> select * from Members;

MEMBERID
----------
NAME
--------------------------------------------------------------------------------
EMAIL
--------------------------------------------------------------------------------
PHONE      
---------- 
JOINDATE
---------
10
Alice Johnson
alice@gmail.com
8921829654 
24-JUN-24


MEMBERID
----------
NAME
--------------------------------------------------------------------------------
EMAIL
--------------------------------------------------------------------------------
PHONE 
---------- 
JOINDATE
---------
20
Bob Smith
bob@gmail.com
9495696542 
12-AUG-24

(.)SQL> select BorrowDate,ReturnDate from Transactions;

BORROWDAT RETURNDAT
--------- ---------
28-JUN-24 28-JUL-24
05-SEP-24 05-OCT-24

#ADVANCED FEATURES

(1)ADD A TRIGGER TO UPDATE AVAILABLE COPIES ON BORROW
SQL> CREATE OR REPLACE TRIGGER Decrease_AvailableCopies
  2  AFTER INSERT ON Transactions
  3  FOR EACH ROW
  4  BEGIN
  5  IF :NEW.ReturnDate IS NULL THEN
  6  UPDATE Books
  7  SET AvailableCopies = AvailableCopies - 1
  8  WHERE BookID = :NEW.BookID;
  9  END IF;
 10  END;
 11  /

Trigger created.

(2)ADD A TRIGGER TO UPDATE AVAILABLE COPIES ON RETURN
SQL> CREATE OR REPLACE TRIGGER Increase_AvailableCopies
  2  AFTER UPDATE OF ReturnDate ON Transactions
  3  FOR EACH ROW
  4  BEGIN
  5  IF :NEW.ReturnDate IS NOT NULL THEN
  6  UPDATE Books
  7  SET AvailableCopies = AvailableCopies + 1
  8  WHERE BookID = :NEW.BookID;
  9  END IF;
 10  END;
 11  /

Trigger created.

#2nd-STUDENT MANAGEMENT SYSTEM:

SQL*Plus: Release 21.0.0.0.0 - Production on Wed Jan 15 19:06:47 2025
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle.  All rights reserved.

Enter user-name: system
Enter password:
Last Successful login time: Wed Jan 15 2025 19:00:14 +05:30

Connected to:
Oracle Database 21c Express Edition Release 21.0.0.0.0 - Production
Version 21.3.0.0.0

#CREATING TABLES

(1)STUDENTS:
SQL> create table Students(
  2  StudentID int primary key,
  3  FirstName varchar(50),
  4  LastName varchar(50),
  5  DOB date,
  6  Email varchar(100),
  7  PhoneNumber integer);

Table created.

(2)COURSES:
SQL> create table Courses(
  2  CourseID int primary key,
  3  CourseName varchar(100),
  4  CourseDescription varchar(50),
  5  Credits integer);

Table created.

(3)ENROLLMENTS:
SQL> create table Enrollments(
  2  EnrollmentID int primary key,
  3  StudentID int,
  4  CourseID int,
  5  Grade char(20),
  6  foreign key (StudentID) references Students (StudentID),
  7  foreign key (CourseID) references Courses (CourseID));

Table created.

#DESCRIBING TABLES

(1)STUDENTS:
SQL> desc Students;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 STUDENTID                                 NOT NULL NUMBER(38)
 FIRSTNAME                                          VARCHAR2(50)
 LASTNAME                                           VARCHAR2(50)
 DOB                                                DATE
 EMAIL                                              VARCHAR2(100)
 PHONENUMBER                                        NUMBER(38)

(2)COURSES:
SQL> desc Courses;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 COURSEID                                  NOT NULL NUMBER(38)
 COURSENAME                                         VARCHAR2(100)
 COURSEDESCRIPTION                                  VARCHAR2(50)
 CREDITS                                            NUMBER(38)

(3)ENROLLMENTS:
SQL> desc Enrollments;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 ENROLLMENTID                              NOT NULL NUMBER(38)
 STUDENTID                                          NUMBER(38)
 COURSEID                                           NUMBER(38)
 GRADE                                              CHAR(20)


#INSERTING VALUES

(1)STUDENTS:
SQL> insert into Students values(001,'John','Doe',to_date('2000-01-01','yy-mm-dd'),'john@gmail.com',9674376345);

1 row created.

SQL> insert into Students values(002,'Jane','smith',to_date('1999-05-15','yy-mm-dd'),'smith@gmail.com',9865443223);

1 row created.

(2)COURSES:
SQL> insert into Courses values(1,'Database Management','Learn about relational databases',4);

1 row created.

SQL> insert into Courses values(2,'Web Development','Introduction to front-end and back-end',3);

1 row created.

(3)ENROLLMENTS:
SQL> insert into Enrollments values(11,001,1,'A');

1 row created.

SQL> insert into Enrollments values(22,002,2,'B');

1 row created.

#QUERYING DATA

(1)FETCH ALL STUDENTS AND THEIR COURSES:
SQL> select Students.FirstName,Students.LastName,Courses.CourseName,Enrollments.Grade from Enrollments join
  2  Students on Enrollments.StudentID=Students.StudentID join
  3  Courses on Enrollments.CourseID=Courses.CourseID;

FIRSTNAME
--------------------------------------------------
LASTNAME
--------------------------------------------------
COURSENAME
--------------------------------------------------------------------------------
GRADE
--------------------
John
Doe
Database Management
A


FIRSTNAME
--------------------------------------------------
LASTNAME
--------------------------------------------------
COURSENAME
--------------------------------------------------------------------------------
GRADE
--------------------
Jane
smith
Web Development
B

(2)COUNT THE NUMBER OF STUDENTS IN EACH COURSE:
SQL> select Courses.CourseName,count(Enrollments.StudentID)as TotalStudents from Enrollments
  2  join Courses on Enrollments.CourseID=Courses.CourseID group by Courses.CourseName;

COURSENAME
--------------------------------------------------------------------------------
TOTALSTUDENTS
-------------
Database Management
            1

Web Development
            1

(3)GET STUDENT DETAILS WHO SCORED 'A' IN ANY COURSE:
SQL> select Students.FirstName,Students.LastName,Courses.CourseName from Enrollments
  2  join Students on Enrollments.StudentID=Students.StudentID
  3  join Courses on Enrollments.CourseID=Courses.CourseID
  4  where Enrollments.Grade='A';

FIRSTNAME
--------------------------------------------------
LASTNAME
--------------------------------------------------
COURSENAME
--------------------------------------------------------------------------------
John
Doe
Database Management



